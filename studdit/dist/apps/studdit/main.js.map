{"version":3,"file":"main.js","mappings":"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","sources":["webpack:///external commonjs \"tslib\"","webpack:///external commonjs \"@nestjs/common\"","webpack:///external commonjs \"@nestjs/core\"","webpack:///./src/app/app.module.ts","webpack:///./src/app/app.controller.ts","webpack:///./src/app/app.service.ts","webpack:///external commonjs \"@nestjs/mongoose\"","webpack:///./src/app/users/users.module.ts","webpack:///./src/app/users/schemas/user.schema.ts","webpack:///./src/app/users/users.controller.ts","webpack:///./src/app/users/users.service.ts","webpack:///external commonjs \"mongoose\"","webpack:///./src/app/neo4j/neo4j.service.ts","webpack:///external commonjs \"neo4j-driver\"","webpack:///external commonjs \"neo4j-driver/lib\"","webpack:///./src/app/users/dto/create-user.dto.ts","webpack:///external commonjs \"@nestjs/swagger\"","webpack:///external commonjs \"class-validator\"","webpack:///./src/app/users/dto/update-user.dto.ts","webpack:///./src/app/users/dto/delete-user.dto.ts","webpack:///./src/app/middleware/middleware.module.ts","webpack:///./src/app/middleware/is-active.middleware.ts","webpack:///./src/app/threads/threads.module.ts","webpack:///./src/app/comments/schemas/comment.schema.ts","webpack:///./src/app/threads/threads.controller.ts","webpack:///./src/app/threads/threads.service.ts","webpack:///./src/app/threads/schemas/threads.schema.ts","webpack:///./src/app/threads/dto/create-thread.dto.ts","webpack:///./src/app/comments/comments.module.ts","webpack:///./src/app/comments/comments.controller.ts","webpack:///./src/app/comments/comments.service.ts","webpack:///./src/app/comments/dto/create-comment.dto.ts","webpack:///./src/app/comments/dto/create-nested-comment.dto.ts","webpack:///./src/app/neo4j/neo4j.module.ts","webpack:///external commonjs \"@nestjs/config\"","webpack:///./src/app/neo4j/neo4j.utils.ts","webpack:///./src/app/neo4j/neo4j-transaction.interceptor.ts","webpack:///external commonjs \"rxjs/operators\"","webpack:///external commonjs \"rxjs\"","webpack:///./src/app/friends/friends.module.ts","webpack:///./src/app/friends/friends.controller.ts","webpack:///./src/app/friends/friends.service.ts","webpack:///./src/app/friends/dto/create-friendship.dto.ts","webpack:///./src/app/friends/dto/delete-friendship.dto.ts","webpack:///external commonjs \"dotenv\"","webpack:///webpack/bootstrap","webpack:///./src/main.ts"],"sourcesContent":["module.exports = require(\"tslib\");","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","import { Module } from '@nestjs/common';\n\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\n\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UsersModule } from './users/users.module';\nimport { ThreadsModule } from './threads/threads.module';\nimport { CommentsModule } from './comments/comments.module';\nimport { Neo4jModule } from './neo4j/neo4j.module';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { Neo4jConfig } from './neo4j/neo4j-config.interface';\nimport { FriendsModule } from './friends/friends.module';\nimport { MiddlewareModule } from './middleware/middleware.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: process.env.NODE_ENV === 'test' ? '.env.test' : '.env'\n    }),\n    MongooseModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        uri: `mongodb+srv://${configService.get('MONGO_USERNAME')}:${configService.get('MONGO_PASSWORD')}@${configService.get('MONGO_PATH')}/${configService.get('DATABASE')}?retryWrites=true&w=majority`,\n      }),\n      inject: [ConfigService]\n    }),\n    UsersModule, \n    ThreadsModule, \n    CommentsModule, \n    FriendsModule, \n    MiddlewareModule,\n    Neo4jModule.forRootAsync({\n      imports: [ ConfigModule ],\n      inject: [ ConfigService ],\n      useFactory: (configService: ConfigService): Neo4jConfig => ({\n        scheme: configService.get('NEO4J_SCHEME'),\n        host: configService.get('NEO4J_HOST'),\n        port: configService.get('NEO4J_PORT'),\n        username: configService.get('NEO4J_USERNAME'),\n        password: configService.get('NEO4J_PASSWORD'),\n        database: configService.get('NEO4J_DATABASE')\n      })\n    }), \n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n","import { Controller, Get } from '@nestjs/common';\n\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(\n    private readonly appService: AppService,\n  ) {}\n\n  @Get()\n  async getData() {\n    return this.appService.getData();\n  }\n}\n","import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getData(): { message: string } {\n    return ({ message: 'Hello API' });\n  }\n}\n","module.exports = require(\"@nestjs/mongoose\");","import { Module, RequestMethod } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UserSchema } from './schemas/user.schema';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\nimport { MiddlewareModule } from '../middleware/middleware.module';\n\n@Module({\n    imports: [\n        MongooseModule.forFeature([{ name: 'User', schema: UserSchema }]),\n        MiddlewareModule.forRoot({\n            exclude: [{\n                path: 'users/:id',\n                method: RequestMethod.PUT\n            }]\n        })\n    ],\n    controllers: [UsersController],\n    providers: [UsersService],\n})\nexport class UsersModule {}\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument, Document, Types } from 'mongoose';\n\nexport type UserDocument = HydratedDocument<User>;\n\n@Schema()\nexport class User {\n    _id?: Types.ObjectId;\n\n    @Prop({ required: true, unique: true })\n    username: string;\n\n    @Prop({ required: true, select: false })\n    password: string;\n\n    @Prop({ default: true })\n    isActive?: boolean;\n};\n\nexport const UserSchema = SchemaFactory.createForClass(User);","import { Body, Controller, Post, HttpException, HttpStatus, Get, Put, NotFoundException, Delete, ValidationPipe, UnauthorizedException, Param } from '@nestjs/common';\nimport { UsersService } from './users.service';\n\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { DeleteUserDto } from './dto/delete-user.dto';\n\nimport { User } from './schemas/user.schema';\nimport { ApiCreatedResponse, ApiNotFoundResponse, ApiOkResponse, ApiParam, ApiTags, ApiUnauthorizedResponse, ApiUnprocessableEntityResponse } from '@nestjs/swagger';\n\n@ApiTags('users')\n@Controller('users')\nexport class UsersController {\n    constructor(private readonly usersService: UsersService) {}\n\n    @Post()\n    @ApiCreatedResponse({ description: 'The user has been successfully created.'})\n    @ApiUnprocessableEntityResponse({ description: 'Unable to create user.'})\n    create(@Body(new ValidationPipe()) createUserDto: CreateUserDto): Promise<{ mongoUser: User, neoUser: any }> {\n        return this.usersService\n            .create(createUserDto)\n            .then(user => user)\n            .catch(error => {\n                throw new HttpException('Unable to create user', HttpStatus.UNPROCESSABLE_ENTITY);\n            });\n    };\n\n    @Get()\n    @ApiOkResponse({ description: 'The users have been successfully retrieved.'})\n    @ApiNotFoundResponse({ description: 'Users not found.'})\n    findAll(): Promise<User[]> {\n        return this.usersService\n            .findAll()\n            .then(users => users)\n            .catch(error => {\n                throw new HttpException('Users not found', HttpStatus.NOT_FOUND);\n            });\n    };\n\n    @Get(':id')\n    @ApiParam({ name: 'id', type: String, description: 'The id of the user to retrieve.' })\n    @ApiOkResponse({ description: 'The user has been successfully retrieved.'})\n    @ApiNotFoundResponse({ description: 'User not found'})\n    findOne(@Param('id') id: string): Promise<User> {\n        return this.usersService\n            .findOne(id)\n            .then(user => user)\n            .catch(error => {\n                throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n            });\n    };\n\n    @Put(':id')\n    @ApiParam({ name: 'id', type: String, description: 'The id of the user to update.' })\n    @ApiOkResponse({ description: 'The user has been successfully updated.'})\n    @ApiNotFoundResponse({ description: 'User not found'})\n    @ApiUnauthorizedResponse({ description: 'Current password is incorrect'})\n    @ApiUnprocessableEntityResponse({ description: 'Unable to update user'})\n    update(@Body(new ValidationPipe()) updateUserDto: UpdateUserDto, @Param('id') id: string): Promise<User> {\n        return this.usersService\n            .update(id, updateUserDto)\n            .then(user => user)\n            .catch(error => {\n                if (error instanceof NotFoundException) {\n                    throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n                }\n\n                if (error instanceof UnauthorizedException) {\n                    throw new HttpException('Current password is incorrect', HttpStatus.UNAUTHORIZED);\n                }\n\n                throw new HttpException('Unable to update user', HttpStatus.UNPROCESSABLE_ENTITY);\n            });\n    };\n\n    @Delete(':id')\n    @ApiParam({ name: 'id', type: String, description: 'The id of the user to delete.' })\n    @ApiOkResponse({ description: 'The user has been successfully deleted.'})\n    @ApiNotFoundResponse({ description: 'User not found'})\n    @ApiUnprocessableEntityResponse({ description: 'Unable to delete user'})\n    remove(@Body(new ValidationPipe()) deleteUserDTO: DeleteUserDto, @Param('id') id: string): Promise<{ mongoUser: User, neoUser: any }> {\n        return this.usersService\n            .delete(id, deleteUserDTO)\n            .then(user => user)\n            .catch(error => {\n                if (error instanceof NotFoundException) {\n                    throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n                }\n\n                if (error instanceof UnauthorizedException) {\n                    throw new HttpException('Password is incorrect', HttpStatus.UNAUTHORIZED);\n                }\n\n                throw new HttpException('Unable to delete user', HttpStatus.UNPROCESSABLE_ENTITY);\n            });\n    };\n}\n","import { Injectable, NotFoundException, UnauthorizedException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { User } from './schemas/user.schema';\nimport { Model } from 'mongoose';\n\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { DeleteUserDto } from './dto/delete-user.dto';\nimport { Neo4jService } from '../neo4j/neo4j.service';\n\n@Injectable()\nexport class UsersService {\n    constructor(\n        @InjectModel(User.name) private userModel: Model<User>,\n        private readonly neo4jService: Neo4jService\n    ) {}\n\n    private async userExists(username: string) {\n        const user = await this.userModel.findOne({ username });\n        return !!user;\n    }\n\n    async create(createUserDto: CreateUserDto): Promise<{ mongoUser: User, neoUser: any }> {\n        const neo = this.neo4jService.beginTransaction();\n        \n        const session = await this.userModel.db.startSession();\n        session.startTransaction();\n\n        try {\n            const userExists = await this.userExists(createUserDto.username);\n\n            if (userExists) {\n                const user = await this.userModel.findOne({ username: createUserDto.username });\n                user.isActive = true;\n                await user.save({ session });\n\n                const neoResult = await neo.run(\n                    `MATCH (u:User {username: $username}) SET u.isActive = true RETURN u`,\n                    { username: createUserDto.username }\n                );\n\n                await neo.commit();\n                await session.commitTransaction();\n\n                return {\n                    mongoUser: user,\n                    neoUser: {\n                        ...neoResult.records[0].get('u').properties,\n                        _id: neoResult.records[0].get('u').identity.low\n                    }\n                };\n            }\n\n            const createdUser = await this.userModel.create([createUserDto], { session });\n\n            const neoResult = await neo.run(\n                `CREATE (u:User {username: $username, isActive: $isActive}) RETURN u`,\n                { username: createUserDto.username, isActive: true }\n            );\n\n            await neo.commit();\n            await session.commitTransaction();\n\n            return {\n                mongoUser: createdUser[0],\n                neoUser: {\n                    ...neoResult.records[0].get('u').properties,\n                    _id: neoResult.records[0].get('u').identity.low\n                }\n            }\n        } catch (error) {\n            await neo.rollback();\n            await session.abortTransaction();\n            throw error;\n        } finally {\n            session.endSession();\n        }\n    }\n\n    async findAll(): Promise<User[]> {\n        try {\n            return this.userModel.find({ isActive: true });\n        } catch (error) {\n            throw new NotFoundException('Users not found');\n        }\n    }\n\n    async findOne(id: string): Promise<User> {\n        try {\n            const user = await this.userModel.findOne({ _id: id, isActive: true });\n\n            if (!user) {\n                throw new NotFoundException('User not found');\n            }\n\n            return user;\n        } catch (error) {\n            throw new NotFoundException('User not found');\n        }\n    }\n\n    async delete(id: string, deleteUserDTO: DeleteUserDto): Promise<{ mongoUser: User, neoUser: any }> {\n        const session = await this.userModel.startSession();\n        session.startTransaction();\n        const neo = this.neo4jService.beginTransaction();\n\n        try {\n            const user = await this.userModel.findOne({ _id: id }).select('+password').session(session);\n\n            if (!user) {\n                throw new NotFoundException('User not found');\n            }\n\n            if (deleteUserDTO.password !== user.password) {\n                throw new UnauthorizedException('Password is incorrect');\n            }\n\n            user.isActive = false;\n\n            await user.save({ session });\n\n            const neoResult = await neo.run(\n                `MATCH (u:User {username: $username}) SET u.isActive = false`,\n                { username: user.username }\n            );\n\n            await session.commitTransaction();\n            await neo.commit();\n\n            return {\n                mongoUser: user,\n                neoUser: neoResult\n            };\n        } catch (error) {\n            await session.abortTransaction();\n            await neo.rollback();\n\n            throw error;\n        } finally {\n            session.endSession();\n        }\n    }\n\n    async update(id: string, updateUserDto: UpdateUserDto): Promise<User> {\n        const session = await this.userModel.startSession();\n        session.startTransaction();\n\n        try {\n            const user = await this.userModel.findOne({ _id: id }).select('+password').session(session);\n            \n            if (!user) {\n                throw new NotFoundException('User not found');\n            }            \n\n            if (updateUserDto.currentPassword !== user.password) {\n                throw new UnauthorizedException('Current password is incorrect');\n            }\n\n            user.password = updateUserDto.newPassword;\n            await user.save({ session });\n\n            await session.commitTransaction();\n\n            return user;\n        } catch (error) {\n            await session.abortTransaction();\n            throw error;\n        } finally {\n            session.endSession();\n        }\n    }\n}\n","module.exports = require(\"mongoose\");","import { Inject, Injectable } from '@nestjs/common';\nimport { Result, Session, Transaction, session } from 'neo4j-driver';\nimport { TransactionImpl } from 'neo4j-driver/lib';\n\n@Injectable()\nexport class Neo4jService {\n    constructor(\n        @Inject(\"NEO4J_CONFIG\") private readonly config,\n        @Inject(\"NEO4J_DRIVER\") private readonly driver\n    ) {}\n\n    getDriver() {\n        return this.driver;\n    }\n\n    beginTransaction(database?: string): Transaction {\n        const session = this.getWriteSession(database);\n\n        return session.beginTransaction();\n    }\n\n    getReadSession(database?: string): Session {\n        return this.driver.session({\n            database: database || this.config.database,\n            defaultAccessMode: session.READ\n        })\n    }\n\n    getWriteSession(database?: string): Session {\n        return this.driver.session({\n            database: database || this.config.database,\n            defaultAccessMode: session.WRITE\n        })\n    }\n\n    read(cypher: string, params?: Record<string, any>, databaseOrTranscation?: string | Transaction): Result {\n        if (databaseOrTranscation instanceof TransactionImpl) {\n            return (<Transaction> databaseOrTranscation).run(cypher, params);\n        }\n\n        const session = this.getReadSession(<string> databaseOrTranscation);\n        return session.run(cypher, params);\n    }\n\n    write(cypher: string, params?: Record<string, any>, databaseOrTranscation?: string | Transaction): Result {\n        if (databaseOrTranscation instanceof TransactionImpl) {\n            return (<Transaction> databaseOrTranscation).run(cypher, params);\n        }\n\n        const session = this.getWriteSession(<string> databaseOrTranscation);\n        return session.run(cypher, params);\n    }\n\n    opApplicationShutdown() {\n        this.driver.close();\n    }\n}\n","module.exports = require(\"neo4j-driver\");","module.exports = require(\"neo4j-driver/lib\");","import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNotEmpty, IsString } from \"class-validator\";\n\nexport class CreateUserDto {\n    @ApiProperty({\n        description: \"The username of the user\",\n        example: \"john.doe\"\n    })\n    @IsNotEmpty()\n    @IsString()\n    readonly username: string;\n\n    @ApiProperty({\n        description: \"The password of the user\",\n        example: \"password123\"\n    })\n    @IsNotEmpty()\n    @IsString()\n    readonly password: string;\n}","module.exports = require(\"@nestjs/swagger\");","module.exports = require(\"class-validator\");","import { ApiProperty } from \"@nestjs/swagger\";\n\nexport class UpdateUserDto {\n    @ApiProperty({\n        description: \"The current password of the user\",\n        example: \"password123\"\n    })\n    readonly currentPassword: string;\n\n    @ApiProperty({\n        description: \"The new password of the user\",\n        example: \"newPassword123\"\n    })\n    readonly newPassword: string;\n\n    @ApiProperty({\n        description: \"Activity status of the user\",\n        example: true\n    })\n    readonly isActive?: boolean;\n}","import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNotEmpty, IsString } from \"class-validator\";\n\nexport class DeleteUserDto {\n    @ApiProperty({\n        description: \"The password of the user\",\n        example: \"password123\"\n    })\n    @IsNotEmpty()\n    @IsString()\n    readonly password: string;\n}","import { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport { IsActiveMiddleware } from './is-active.middleware';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UserSchema } from '../users/schemas/user.schema';\n\n@Module({\n    imports: [\n        MongooseModule.forFeature([{ name: 'User', schema: UserSchema }]),\n    ]\n})\nexport class MiddlewareModule implements NestModule {\n    static forRoot(options?: any) {\n        return {\n            module: MiddlewareModule,\n            providers: [\n                {\n                    provide: 'MIDDLEWARE_OPTIONS',\n                    useValue: options || {}\n                }\n            ]\n        }\n    } \n    \n    configure(consumer: MiddlewareConsumer) {\n        const options = this.getOptions();\n\n        consumer\n            .apply(IsActiveMiddleware)\n            .exclude(...options.exclude)\n            .forRoutes(options)\n    }\n\n    getOptions(): any {\n        const defaultOptions = {\n            exclude: [],\n            forRoutes: []\n        }\n\n        const options = this.getMiddlewareOptions();\n        return { ...defaultOptions, ...options };\n    }\n\n    getMiddlewareOptions(): any {\n        const middlewareOptions = Reflect.getMetadata('MIDDLEWARE_OPTIONS', MiddlewareModule);\n\n        return middlewareOptions ? middlewareOptions : {};\n    }\n}\n","import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { User } from '../users/schemas/user.schema';\n\n@Injectable()\nexport class IsActiveMiddleware implements NestMiddleware {\n  constructor(\n    @InjectModel(User.name) private userModel: Model<User>\n  ) {}\n\n  async use(req: any, res: any, next: () => void) {\n    try {\n      const username = req.headers['authorization'];\n\n      if (!username) {\n        return res\n          .status(401)\n          .send({ message: 'No authorization header provided' });\n      }\n\n      const user = await this.userModel.findOne({ username: username });\n\n      if (!user) {\n        return res\n          .status(404)\n          .send({ message: 'Authenticated user not found' });\n      }\n\n      if (!user.isActive) {\n        return res\n          .status(401)\n          .send({ message: 'Authenticated user is not active' });\n      }\n\n      next();\n    } catch (error) {\n      return res\n        .status(500)\n        .send({ message: 'Internal server error' });\n    }\n  }\n}\n","import { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from '../users/schemas/user.schema';\nimport { Comment, CommentSchema } from '../comments/schemas/comment.schema';\nimport { ThreadsController } from './threads.controller';\nimport { ThreadsService } from './threads.service';\nimport { Thread, ThreadSchema } from './schemas/threads.schema';\nimport { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport { IsActiveMiddleware } from '../middleware/is-active.middleware';\nimport { MiddlewareModule } from '../middleware/middleware.module';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: Thread.name, schema: ThreadSchema },\n      { name: User.name, schema: UserSchema },\n      { name: Comment.name, schema: CommentSchema }\n    ]),\n    MiddlewareModule.forRoot()\n  ],\n  controllers: [ThreadsController],\n  providers: [ThreadsService]\n})\nexport class ThreadsModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer\n      .apply(IsActiveMiddleware)\n      .forRoutes(ThreadsController)\n  }\n}","import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { HydratedDocument, Types } from \"mongoose\";\n\nexport type CommentDocument = HydratedDocument<Comment>;\n\n@Schema({ timestamps: true })\nexport class Comment {\n    @Prop({ required: true, index: true }) // Index for username\n    username: string;\n\n    @Prop({ required: true })\n    content: string;\n\n    @Prop({ type: Types.ObjectId, ref: 'Comment', default: null })\n    parentComment: Types.ObjectId;\n\n    @Prop({ type: Types.ObjectId, ref: 'Thread', default: null })\n    thread: Types.ObjectId;\n\n    // Similar consideration: Referencing related data (User and nested Comment)\n    @Prop({ type: [{ type: Types.ObjectId, ref: 'Comment' }], default: [] })\n    comments: Types.ObjectId[];\n\n    @Prop({ type: [{ type: Types.ObjectId, ref: 'User' }], default: [] })\n    upvotes: Types.ObjectId[];\n\n    @Prop({ type: [{ type: Types.ObjectId, ref: 'User' }], default: [] })\n    downvotes: Types.ObjectId[];\n\n    // Index for timestamps if common queries involve time-based filtering/sorting\n    @Prop({ index: true })\n    createdAt: Date;\n\n    @Prop({ index: true })\n    updatedAt: Date;\n\n    // Calculated field for score\n    get score(): number {\n        if (\n            this.upvotes.some(upvote => !Types.ObjectId.isValid(upvote)) || \n            this.downvotes.some(downvote => !Types.ObjectId.isValid(downvote))\n        ) return NaN;\n\n        return this.upvotes.length - this.downvotes.length;\n    }\n}\n\nexport const CommentSchema = SchemaFactory.createForClass(Comment);","import { BadRequestException, Body, Controller, Delete, Get, HttpException, HttpStatus, NotFoundException, Param, Patch, Post, Put, Query, Req, ValidationPipe } from '@nestjs/common';\nimport { ApiCreatedResponse, ApiNotFoundResponse, ApiOkResponse, ApiParam, ApiQuery, ApiSecurity, ApiTags, ApiUnprocessableEntityResponse } from '@nestjs/swagger';\nimport { ThreadsService } from './threads.service';\nimport { CreateThreadDto } from './dto/create-thread.dto';\nimport { Thread } from './schemas/threads.schema';\n\n@ApiTags('threads')\n@Controller('threads')\nexport class ThreadsController {\n    constructor(private readonly threadsService: ThreadsService) {}\n\n    @Post()\n    @ApiSecurity('username')\n    @ApiCreatedResponse({ description: 'The thread has been successfully created.'})\n    @ApiUnprocessableEntityResponse({ description: 'Unable to create thread.'})\n    @ApiNotFoundResponse({ description: 'User not found'})\n    create(@Body(new ValidationPipe()) createThreadDto: CreateThreadDto): Promise<Thread> {\n        return this.threadsService\n            .create(createThreadDto)\n            .then(thread => thread)\n            .catch(error => {\n                if (error instanceof NotFoundException) {\n                    throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n                }\n\n                throw new HttpException('Unable to create thread', HttpStatus.UNPROCESSABLE_ENTITY);\n            });\n    };\n\n    @Put(':id')\n    @ApiSecurity('username')\n    @ApiParam({ name: 'id', type: String, description: 'The id of the thread to update.' })\n    @ApiOkResponse({ description: 'The thread has been successfully updated.'})\n    @ApiNotFoundResponse({ description: 'Thread not found'})\n    @ApiUnprocessableEntityResponse({ description: 'Unable to update thread'})\n    update(@Body(new ValidationPipe()) createThreadDto: CreateThreadDto, @Param('id') id: string): Promise<Thread> {\n        return this.threadsService\n            .update(id, createThreadDto)\n            .then(thread => thread)\n            .catch(error => {\n                if (error instanceof NotFoundException) {\n                    throw new HttpException('Thread not found', HttpStatus.NOT_FOUND);\n                }\n\n                throw new HttpException('Unable to update thread', HttpStatus.UNPROCESSABLE_ENTITY);\n            });\n    };\n\n    @Patch(':id/upvote')\n    @ApiSecurity('username')\n    @ApiParam({ name: 'id', type: String, description: 'The id of the thread to upvote.' })\n    @ApiOkResponse({ description: 'The thread has been successfully upvoted.'})\n    @ApiNotFoundResponse({ description: 'Thread not found'})\n    @ApiNotFoundResponse({ description: 'User not found'})\n    @ApiUnprocessableEntityResponse({ description: 'Unable to upvote thread'})\n    upvote(@Param('id') id: string, @Req() req: any): Promise<Thread> {\n        const username = req.headers['authorization'];\n\n        return this.threadsService\n            .upvote(id, username)\n            .then(thread => thread)\n            .catch(error => {\n                if (error instanceof NotFoundException) {\n                    throw new HttpException('Thread or User not found', HttpStatus.NOT_FOUND);\n                }\n\n                if (error instanceof BadRequestException) {\n                    throw new HttpException('Already upvoted this thread', HttpStatus.BAD_REQUEST);\n                }\n\n                throw new HttpException('Unable to upvote thread', HttpStatus.UNPROCESSABLE_ENTITY);\n            });\n    };\n\n    @Patch(':id/downvote')\n    @ApiSecurity('username')\n    @ApiParam({ name: 'id', type: String, description: 'The id of the thread to downvote.' })\n    @ApiOkResponse({ description: 'The thread has been successfully downvoted.'})\n    @ApiNotFoundResponse({ description: 'Thread not found'})\n    @ApiNotFoundResponse({ description: 'User not found'})\n    @ApiUnprocessableEntityResponse({ description: 'Unable to downvote thread'})\n    downvote(@Param('id') id: string, @Req() req: any): Promise<Thread> {\n        const username = req.headers['authorization'];\n        \n        return this.threadsService\n            .downvote(id, username)\n            .then(thread => thread)\n            .catch(error => {\n                if (error instanceof NotFoundException) {\n                    throw new HttpException('Thread or User not found', HttpStatus.NOT_FOUND);\n                }\n\n                if (error instanceof BadRequestException) {\n                    throw new HttpException('Bad request', HttpStatus.BAD_REQUEST);\n                }\n\n                throw new HttpException('Unable to downvote thread', HttpStatus.UNPROCESSABLE_ENTITY);\n            });\n    };\n\n    @Delete(':id')\n    @ApiSecurity('username')\n    @ApiParam({ name: 'id', type: String, description: 'The id of the thread to delete.' })\n    @ApiOkResponse({ description: 'The thread has been successfully deleted.'})\n    @ApiNotFoundResponse({ description: 'Thread not found'})\n    @ApiUnprocessableEntityResponse({ description: 'Unable to delete thread'})\n    delete(@Param('id') id: string, @Req() req: any): Promise<Thread> {\n        const username = req.headers['authorization'];\n        \n        return this.threadsService\n            .delete(id, username)\n            .then(thread => thread)\n            .catch(error => {\n                if (error instanceof NotFoundException) {\n                    throw new HttpException('Thread not found', HttpStatus.NOT_FOUND);\n                }\n\n                throw new HttpException('Unable to delete thread', HttpStatus.UNPROCESSABLE_ENTITY);\n            });\n    };\n\n    @Get()\n    @ApiSecurity('username')\n    @ApiQuery({ name: 'sort', type: String, description: 'The sorting method: upvotes, score, comments.', required: false })\n    @ApiOkResponse({ description: 'The threads have been successfully retrieved.'})\n    findAll(@Query('sort') sort: string): Promise<Thread[]> {\n        const sortMethods = {\n            upvotes: () => this.threadsService.findAllSortedByUpvotes(),\n            score: () => this.threadsService.findAllSortedByScore(),\n            comments: () => this.threadsService.findAllSortedByComments(),\n            undefined: () => this.threadsService.findAll()\n        };\n\n        const sortMethod = sortMethods[sort];\n\n        if (!sortMethod) {\n            throw new BadRequestException('Invalid sorting method');\n        }\n\n        try {\n            return sortMethod();\n        } catch (error) {\n            throw new HttpException('Unable to retrieve threads', HttpStatus.UNPROCESSABLE_ENTITY);\n        }\n    }\n\n    @Get(':id')\n    @ApiSecurity('username')\n    @ApiParam({ name: 'id', type: String, description: 'The id of the thread to retrieve.' })\n    @ApiOkResponse({ description: 'The thread has been successfully retrieved.'})\n    @ApiNotFoundResponse({ description: 'Thread not found'})\n    findOne(@Param('id') id: string): Promise<Thread> {\n        return this.threadsService\n            .findOne(id)\n            .then(thread => thread)\n            .catch(error => {\n                if (error instanceof NotFoundException) {\n                    throw new HttpException('Thread not found', HttpStatus.NOT_FOUND);\n                }\n\n                throw new HttpException('Unable to retrieve thread', HttpStatus.UNPROCESSABLE_ENTITY);\n            });\n    }\n}\n","import { BadRequestException, Inject, Injectable, NotFoundException, UnauthorizedException } from '@nestjs/common';\nimport { Thread } from './schemas/threads.schema';\nimport { User } from '../users/schemas/user.schema';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, Types } from 'mongoose';\nimport { CreateThreadDto } from './dto/create-thread.dto';\nimport { NotFoundError } from 'rxjs';\nimport { Neo4jService } from '../neo4j/neo4j.service';\nimport { UpdateThreadDto } from './dto/update-thread.dto';\n\n@Injectable()\nexport class ThreadsService {\n    constructor (\n        @InjectModel(Thread.name) private threadModel: Model<Thread>,\n        @InjectModel(User.name) private userModel: Model<User>,\n        private readonly neo4jService: Neo4jService\n    ) {}\n\n    async create(createThreadDto: CreateThreadDto): Promise<Thread> {\n        const neo = this.neo4jService.beginTransaction();\n\n        const session = await this.threadModel.db.startSession();\n        session.startTransaction();\n\n        try {\n            const createdThread = await this.threadModel.create([createThreadDto], { session });\n\n            await neo.run(\n                `CREATE (t:Thread { title: $title, content: $content, username: $username }) RETURN t`,\n                { title: createThreadDto.title, content: createThreadDto.content, username: createThreadDto.username }\n            );\n\n            await neo.commit();\n            await session.commitTransaction();\n\n            return createdThread[0];\n        } catch (error) {\n            await neo.rollback();\n            await session.abortTransaction();\n            throw error;\n        } finally {\n            session.endSession();\n        }\n    }\n\n    async update(id: string, updateThreadDto: UpdateThreadDto): Promise<Thread> {\n        const session = await this.threadModel.db.startSession();\n        session.startTransaction();\n\n        try {\n            const thread = await this.threadModel.findOne({ _id: id }).session(session);\n\n            if (!thread) {\n                throw new NotFoundException('Thread not found');\n            }\n\n            if (thread.username !== updateThreadDto.username) {\n                throw new UnauthorizedException('User is not authorized to update this thread');\n            }\n\n            const updatedThread = await this.threadModel.findOneAndUpdate({ _id: id }, updateThreadDto, { new: true, session });\n\n            await session.commitTransaction();\n\n            return updatedThread;\n        } catch (error) {\n            await session.abortTransaction();\n            throw error;\n        } finally {\n            session.endSession();\n        }\n    }\n\n    async upvote(id: string, username: string): Promise<Thread> {\n        const neo = this.neo4jService.beginTransaction();\n        const session = await this.threadModel.db.startSession();\n        session.startTransaction();\n\n        try {\n            const thread = await this.threadModel.findOne({ _id: id }).session(session);\n\n            if (!thread) {\n                throw new NotFoundException('Thread not found');\n            }\n\n            const user: User = await this.userModel.findOne({ username: username }).session(session);\n\n            if (!user) {\n                throw new NotFoundException('User not found');\n            }\n\n            const hasUpvoted = thread.upvotes.includes(user._id);\n            const hasDownvoted = thread.downvotes.includes(user._id);\n\n            if (hasUpvoted) {\n                throw new BadRequestException('User has already upvoted this thread');\n            }\n\n            if (hasDownvoted) {\n                const idx = thread.downvotes.indexOf(user._id);\n                thread.downvotes.splice(idx, 1);\n            }\n\n            thread.upvotes.push(user._id);\n            await thread.save({ session });\n\n            await neo.run(\n                `MATCH (u:User { username: $username }), (t:Thread { id: $id }) MERGE (u)-[:UPVOTED]->(t)`,\n                { username: username, id: thread._id }\n            );\n\n            await neo.commit();\n            await session.commitTransaction();\n\n            return thread;\n        } catch (error) {\n            await neo.rollback();\n            await session.abortTransaction();\n            throw error;\n        } finally {\n            session.endSession();\n        }\n    }\n\n    async downvote(id: string, username: string): Promise<Thread> {\n        const neo = this.neo4jService.beginTransaction();\n        const session = await this.threadModel.db.startSession();\n        session.startTransaction();\n\n        try {\n            const thread = await this.threadModel.findOne({ _id: id }).session(session);\n\n            if (!thread) {\n                throw new NotFoundException('Thread not found');\n            }\n\n            const user: User = await this.userModel.findOne({ username: username }).session(session);\n\n            if (!user) {\n                throw new NotFoundException('User not found');\n            }\n\n            const hasUpvoted = thread.upvotes.includes(user._id);\n            const hasDownvoted = thread.downvotes.includes(user._id);\n\n            if (hasDownvoted) {\n                throw new BadRequestException('User has already downvoted this thread');\n            }\n\n            if (hasUpvoted) {\n                const idx = thread.upvotes.indexOf(user._id);\n                thread.upvotes.splice(idx, 1);\n            }\n\n            thread.downvotes.push(user._id);\n            await thread.save({ session });\n\n            await neo.run(\n                `MATCH (u:User { username: $username }), (t:Thread { id: $id }) MERGE (u)-[:DOWNVOTED]->(t)`,\n                { username: username, id: thread._id }\n            );\n\n            await neo.commit();\n            await session.commitTransaction();\n\n            return thread;\n        } catch (error) {\n            await neo.rollback();\n            await session.abortTransaction();\n            throw error;\n        } finally {\n            session.endSession();\n        }\n    }\n\n    async delete(id: string, username: string): Promise<Thread> {\n        const neo = this.neo4jService.beginTransaction();\n        const session = await this.threadModel.db.startSession();\n        session.startTransaction();\n\n        try {\n            const thread = await this.threadModel.findOne({ _id: id }).session(session);\n\n            if (!thread) {\n                throw new NotFoundException('Thread not found');\n            }\n\n            if (thread.username !== username) {\n                throw new UnauthorizedException('User is not authorized to delete this thread');\n            }\n\n            const deletedThread = await this.threadModel.findOneAndDelete({ _id: id }, { session });\n\n            await Promise.all([\n                neo.run(`MATCH (:User)-[r:UPVOTED]->(t:Thread { id: $id }) DELETE r`, { id: thread._id } ),\n                neo.run(`MATCH (:User)-[r:DOWNVOTED]->(t:Thread { id: $id }) DELETE r`, { id: thread._id } ),\n                neo.run(`MATCH (t:Thread { id: $id }) DETACH DELETE t`, { id: thread._id } )\n            ]);\n\n            await neo.commit();\n            await session.commitTransaction();\n\n            return deletedThread;\n        } catch (error) {\n            await neo.rollback();\n            await session.abortTransaction();\n            throw error;\n        } finally {\n            session.endSession();\n        }\n    }\n\n    async findAll(): Promise<Thread[]> {\n        try {\n            return this.threadModel\n                .find()\n                .select('-comments');\n        } catch (error) {\n            throw new NotFoundException('Threads not found');\n        }\n    }\n\n    async findAllSortedByUpvotes(): Promise<Thread[]> {\n        try {\n            return this.threadModel\n                .find()\n                .sort({ upvotes: -1 })\n                .select('-comments');\n        } catch (error) {\n            throw new NotFoundException('Threads not found');\n        }\n    }\n\n    async findAllSortedByScore(): Promise<Thread[]> {\n        try {\n            return this.threadModel.aggregate([\n                { $addFields: { voteDifference: { $subtract: [ { $size: \"$upvotes\" }, { $size: \"$downvotes\" } ] } } },\n                { $sort: { voteDifference: -1 } },\n                { $project: { comments: 0 } }\n            ]);\n        } catch (error) {\n            throw new NotFoundException('Threads not found');\n        }\n    }\n\n    async findAllSortedByComments(): Promise<Thread[]> {\n        try {\n            return this.threadModel.aggregate([\n                { $addFields: { commentCount: { $size: \"$comments\" } } },\n                { $sort: { commentCount: -1 } },\n                { $project: { comments: 0 } }\n            ]);\n        } catch (error) {\n            throw new NotFoundException('Threads not found');\n        }\n    }\n\n    async findOne(id: string): Promise<Thread> {\n        try {\n            const thread = await this.threadModel.aggregate([\n                { $match: { _id: new Types.ObjectId(id) } },\n                {\n                    $lookup: {\n                        from: 'comments', // Changed from 'comments' to 'comment'\n                        localField: '_id',\n                        foreignField: 'thread',\n                        as: 'comments'\n                    }\n                },\n                {\n                    $addFields: {\n                        upvotesCount: { $size: \"$upvotes\" },\n                        downvotesCount: { $size: \"$downvotes\" },\n                        comments: {\n                            $map: {\n                                input: \"$comments\",\n                                as: \"comment\",\n                                in: {\n                                    _id: \"$$comment._id\",\n                                    content: \"$$comment.content\",\n                                    upvotesCount: { $size: \"$$comment.upvotes\" },\n                                    downvotesCount: { $size: \"$$comment.downvotes\" },\n                                }\n                            }\n                        }\n                    }\n                },\n                { $unset: [\"upvotes\", \"downvotes\"] }\n            ]);\n\n            if (!thread.length) {\n                throw new NotFoundException('Thread not found');\n            }\n\n            return thread[0];\n        } catch (error) {\n            throw new Error('Unable to find thread');\n        }\n    }\n}\n","import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { HydratedDocument, Document, Types } from \"mongoose\";\n\nexport type ThreadDocument = HydratedDocument<Thread>;\n\n@Schema({ timestamps: true })\nexport class Thread {\n    _id?: Types.ObjectId;\n\n    @Prop({ required: true, index: true }) // Index for username\n    username: string;\n\n    @Prop({ required: true })\n    title: string;\n\n    @Prop({ required: true })\n    content: string;\n\n    // Consideration: Referencing related data (User and Comment) for scalability\n    @Prop({ type: [{ type: Types.ObjectId, ref: 'Comment' }], default: [] })\n    comments: Types.ObjectId[];\n\n    @Prop({ type: [{ type: Types.ObjectId, ref: 'User' }], default: [] })\n    upvotes: Types.ObjectId[];\n\n    @Prop({ type: [{ type: Types.ObjectId, ref: 'User' }], default: [] })\n    downvotes: Types.ObjectId[];\n\n    // Index for timestamps if common queries involve time-based filtering/sorting\n    @Prop({ index: true })\n    createdAt: Date;\n\n    @Prop({ index: true })\n    updatedAt: Date;\n\n    // Calculated field for score\n    get score(): number {\n        if (\n            this.upvotes.some(upvote => !Types.ObjectId.isValid(upvote)) || \n            this.downvotes.some(downvote => !Types.ObjectId.isValid(downvote))\n        ) return NaN;\n\n        return this.upvotes.length - this.downvotes.length;\n    }\n}\n\nexport const ThreadSchema = SchemaFactory.createForClass(Thread);","import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNotEmpty, IsString } from \"class-validator\";\n\nexport class CreateThreadDto {\n    @ApiProperty({\n        description: \"The username of the user\",\n        example: \"john.doe\"\n    })\n    @IsNotEmpty()\n    @IsString()\n    readonly username: string;\n\n    @ApiProperty({\n        description: \"The title of the thread\",\n        example: \"My first thread\"\n    })\n    @IsNotEmpty()\n    @IsString()\n    readonly title: string;\n\n    @ApiProperty({\n        description: \"The content of the thread\",\n        example: \"This is the content of my first thread\"\n    })\n    @IsNotEmpty()\n    @IsString()\n    readonly content: string;\n}","import { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { CommentSchema } from './schemas/comment.schema';\nimport { UserSchema } from '../users/schemas/user.schema';\nimport { ThreadSchema } from '../threads/schemas/threads.schema';\nimport { CommentsController } from './comments.controller';\nimport { CommentsService } from './comments.service';\nimport { IsActiveMiddleware } from '../middleware/is-active.middleware';\nimport { MiddlewareModule } from '../middleware/middleware.module';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: 'Comment', schema: CommentSchema },\n      { name: 'User', schema: UserSchema },\n      { name: 'Thread', schema: ThreadSchema }\n    ]),\n    MiddlewareModule.forRoot()\n  ],\n  providers: [CommentsService],\n  controllers: [CommentsController]\n})\nexport class CommentsModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n      consumer\n        .apply(IsActiveMiddleware)\n        .forRoutes(CommentsController)\n  }\n}\n","import { BadRequestException, Body, Controller, Delete, Get, HttpException, HttpStatus, NotFoundException, Param, Patch, Post, Req, ValidationPipe } from '@nestjs/common';\nimport { ApiCreatedResponse, ApiNotFoundResponse, ApiOkResponse, ApiParam, ApiSecurity, ApiTags, ApiUnprocessableEntityResponse } from '@nestjs/swagger';\nimport { CommentsService } from './comments.service';\nimport { CreateCommentDto } from './dto/create-comment.dto';\nimport { Comment } from './schemas/comment.schema';\nimport { CreateNestedCommentDto } from './dto/create-nested-comment.dto';\n\n@ApiTags('comments')\n@Controller('comments')\nexport class CommentsController {\n    constructor(private readonly commentsService: CommentsService) {}\n\n    @Post()\n    @ApiSecurity('username')\n    @ApiCreatedResponse({ description: 'The comment has been successfully created.'})\n    @ApiUnprocessableEntityResponse({ description: 'Unable to create comment.'})\n    @ApiNotFoundResponse({ description: 'User or Thread not found'})\n    create(@Body(new ValidationPipe()) createCommentDto: CreateCommentDto): Promise<Comment> {\n        return this.commentsService\n            .create(createCommentDto)\n            .then(comment => comment)\n            .catch(error => {\n                if (error instanceof NotFoundException) {\n                    throw new HttpException('User or Thread not found', HttpStatus.NOT_FOUND);\n                }\n\n                throw new HttpException('Unable to create comment', HttpStatus.UNPROCESSABLE_ENTITY);\n            });\n    }\n\n    @Post(':id')\n    @ApiSecurity('username')\n    @ApiParam({ name: 'id', type: String, description: 'The id of the parent comment.' })\n    @ApiCreatedResponse({ description: 'The nested comment has been successfully created.'})\n    @ApiUnprocessableEntityResponse({ description: 'Unable to create nested comment.'})\n    @ApiNotFoundResponse({ description: 'User or Parent comment not found'})\n    createNestedComment(@Body(new ValidationPipe()) createNestedCommentDto: CreateNestedCommentDto, @Param('id') id: string): Promise<Comment> {\n        return this.commentsService\n            .createNestedComment(id, createNestedCommentDto)\n            .then(comment => comment)\n            .catch(error => {\n                if (error instanceof NotFoundException) {\n                    throw new HttpException('User or Parent comment not found', HttpStatus.NOT_FOUND);\n                }\n\n                throw new HttpException('Unable to create nested comment', HttpStatus.UNPROCESSABLE_ENTITY);\n            });\n    }\n\n    @Delete(':id')\n    @ApiSecurity('username')\n    @ApiParam({ name: 'id', type: String, description: 'The id of the comment to delete.' })\n    @ApiOkResponse({ description: 'The comment has been successfully deleted.'})\n    @ApiNotFoundResponse({ description: 'Comment not found'})\n    @ApiUnprocessableEntityResponse({ description: 'Unable to delete comment'})\n    delete(@Param('id') id: string, @Req() req: any): Promise<Comment> {\n        const username = req.headers['authorization'];\n\n        return this.commentsService\n            .delete(id, username)\n            .then(comment => comment)\n            .catch(error => {\n                if (error instanceof NotFoundException) {\n                    throw new HttpException('Comment not found', HttpStatus.NOT_FOUND);\n                }\n\n                throw new HttpException('Unable to delete comment', HttpStatus.UNPROCESSABLE_ENTITY);\n            });\n    }\n\n    @Patch(':id/upvote')\n    @ApiParam({ name: 'id', type: String, description: 'The id of the comment to upvote.' })\n    @ApiOkResponse({ description: 'The comment has been successfully upvoted.'})\n    @ApiNotFoundResponse({ description: 'Comment or User not found'})\n    @ApiUnprocessableEntityResponse({ description: 'Unable to upvote comment'})\n    upvote(@Param('id') id: string, @Body('username') username: string): Promise<Comment> {\n        return this.commentsService\n            .upvoteComment(id, username)\n            .then(comment => comment)\n            .catch(error => {\n                if (error instanceof NotFoundException) {\n                    throw new HttpException('Comment or User not found', HttpStatus.NOT_FOUND);\n                }\n\n                if (error instanceof BadRequestException) {\n                    throw new HttpException('Bad request', HttpStatus.BAD_REQUEST);\n                }\n\n                throw new HttpException('Unable to upvote comment', HttpStatus.UNPROCESSABLE_ENTITY);\n            });\n    }\n\n    @Patch(':id/downvote')\n    @ApiParam({ name: 'id', type: String, description: 'The id of the comment to downvote.' })\n    @ApiOkResponse({ description: 'The comment has been successfully downvoted.'})\n    @ApiNotFoundResponse({ description: 'Comment or User not found'})\n    @ApiUnprocessableEntityResponse({ description: 'Unable to downvote comment'})\n    downvote(@Param('id') id: string, @Body('username') username: string): Promise<Comment> {\n        return this.commentsService\n            .downvoteComment(id, username)\n            .then(comment => comment)\n            .catch(error => {\n                if (error instanceof NotFoundException) {\n                    throw new HttpException('Comment or User not found', HttpStatus.NOT_FOUND);\n                }\n\n                if (error instanceof BadRequestException) {\n                    throw new HttpException('Bad request', HttpStatus.BAD_REQUEST);\n                }\n\n                throw new HttpException('Unable to downvote comment', HttpStatus.UNPROCESSABLE_ENTITY);\n            });\n    }\n\n    @Get(':id/thread')\n    @ApiParam({ name: 'id', type: String, description: 'The id of the comment to get the thread from.' })\n    @ApiOkResponse({ description: 'The thread has been successfully retrieved.'})\n    @ApiNotFoundResponse({ description: 'Thread not found'})\n    @ApiUnprocessableEntityResponse({ description: 'Unable to get comments'})\n    getCommentsByThreadId(@Param('id') id: string): Promise<Comment[]> {\n        return this.commentsService\n            .getCommentsByThreadId(id)\n            .then(comments => comments)\n            .catch(error => {\n                if (error instanceof NotFoundException) {\n                    throw new HttpException('Thread not found', HttpStatus.NOT_FOUND);\n                }\n\n                throw new HttpException('Unable to get comments', HttpStatus.UNPROCESSABLE_ENTITY);\n            });\n    }\n\n    @Get()\n    @ApiSecurity('username')\n    @ApiOkResponse({ description: 'The comments have been successfully retrieved.'})\n    @ApiUnprocessableEntityResponse({ description: 'Unable to get comments'})\n    getComments(): Promise<Comment[]> {\n        return this.commentsService\n            .getComments()\n            .then(comments => comments)\n            .catch(error => {\n                throw new HttpException('Unable to get comments', HttpStatus.UNPROCESSABLE_ENTITY);\n            });\n    }\n\n    @Get(':id')\n    @ApiParam({ name: 'id', type: String, description: 'The id of the comment to get.' })\n    @ApiOkResponse({ description: 'The comment has been successfully retrieved.'})\n    @ApiNotFoundResponse({ description: 'Comment not found'})\n    @ApiUnprocessableEntityResponse({ description: 'Unable to get comment'})\n    getCommentById(@Param('id') id: string): Promise<Comment> {\n        return this.commentsService\n            .getCommentById(id)\n            .then(comment => comment)\n            .catch(error => {\n                if (error instanceof NotFoundException) {\n                    throw new HttpException('Comment not found', HttpStatus.NOT_FOUND);\n                }\n\n                throw new HttpException('Unable to get comment', HttpStatus.UNPROCESSABLE_ENTITY);\n            });\n    }\n\n    @Get(':id/nested')\n    @ApiParam({ name: 'id', type: String, description: 'The id of the comment to get nested comments from.' })\n    @ApiOkResponse({ description: 'The nested comments have been successfully retrieved.'})\n    @ApiNotFoundResponse({ description: 'Comment not found'})\n    @ApiUnprocessableEntityResponse({ description: 'Unable to get nested comments'})\n    getNestedComments(@Param('id') id: string): Promise<Comment[]> {\n        return this.commentsService\n            .getNestedComments(id)\n            .then(comments => comments)\n            .catch(error => {\n                if (error instanceof NotFoundException) {\n                    throw new HttpException('Comment not found', HttpStatus.NOT_FOUND);\n                }\n\n                throw new HttpException('Unable to get nested comments', HttpStatus.UNPROCESSABLE_ENTITY);\n            });\n    }\n}\n","import { BadRequestException, Injectable, NotFoundException, UnauthorizedException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { User } from '../users/schemas/user.schema';\nimport { Thread } from '../threads/schemas/threads.schema';\nimport { Comment } from './schemas/comment.schema';\nimport { CreateCommentDto } from './dto/create-comment.dto';\nimport { CreateNestedCommentDto } from './dto/create-nested-comment.dto';\n\n@Injectable()\nexport class CommentsService {\n    constructor (\n        @InjectModel(Comment.name) private commentModel: Model<Comment>,\n        @InjectModel(User.name) private userModel: Model<User>,\n        @InjectModel(Thread.name) private threadModel: Model<Thread>,\n    ) {}\n\n    async create(createCommentDto: CreateCommentDto): Promise<Comment> {\n        const session = await this.commentModel.db.startSession();\n        session.startTransaction();\n\n        try {\n            const user = await this.userModel.findOne({ username: createCommentDto.username }).session(session);\n\n            if (!user) {\n                throw new NotFoundException('User not found');\n            }\n\n            const thread = await this.threadModel.findOne({ _id: createCommentDto.thread }).session(session);\n\n            if (!thread) {\n                throw new NotFoundException('Thread not found');\n            }\n\n            const createdComment = await this.commentModel.create([createCommentDto], { session });\n            thread.comments.push(createdComment[0]._id);\n            await thread.save({ session });\n\n            await session.commitTransaction();\n\n            return createdComment[0];\n        } catch (error) {\n            await session.abortTransaction();\n            throw new Error('Unable to create comment');\n        } finally {\n            session.endSession();\n        }\n    }\n\n    async createNestedComment(id: string, createNestedCommentDto: CreateNestedCommentDto): Promise<Comment> {\n        const session = await this.commentModel.db.startSession();\n        session.startTransaction();\n\n        try {\n            const user = await this.userModel.findOne({ username: createNestedCommentDto.username }).session(session);\n\n            if (!user) {\n                throw new NotFoundException('User not found');\n            }\n\n            const parentComment = await this.commentModel.findOne({ _id: id }).session(session);\n\n            if (!parentComment) {\n                throw new NotFoundException('Parent comment not found');\n            }\n\n            const createdComment = await this.commentModel.create([createNestedCommentDto], { session });\n            parentComment.comments.push(createdComment[0]._id);\n            await parentComment.save({ session });\n\n            await session.commitTransaction();\n\n            return createdComment[0];\n        } catch (error) {\n            await session.abortTransaction();\n            throw new Error('Unable to create nested comment');\n        } finally {\n            session.endSession();\n        }\n    }\n\n    async delete(id: string, username: string): Promise<Comment> {\n        const session = await this.commentModel.db.startSession();\n        session.startTransaction();\n\n        try {\n            const comment = await this.commentModel.findOne({ _id: id }).session(session);\n\n            if (!comment) {\n                throw new NotFoundException('Comment not found');\n            }\n\n            if (comment.username !== username) {\n                throw new UnauthorizedException('User is not author of comment');\n            }\n\n            const deletedComment = await this.commentModel.findByIdAndDelete(id, { session });\n\n            await session.commitTransaction();\n\n            return deletedComment;\n        } catch (error) {\n            await session.abortTransaction();\n            throw new Error('Unable to delete comment');\n        } finally {\n            session.endSession();\n        }\n    }\n\n    async upvoteComment(id: string, username: string): Promise<Comment> {\n        const session = await this.commentModel.db.startSession();\n        session.startTransaction();\n\n        try {\n            const comment = await this.commentModel.findOne({ _id: id }).session(session);\n\n            if (!comment) {\n                throw new NotFoundException('Comment not found');\n            }\n\n            const user: User = await this.userModel.findOne({ username: username }).session(session);\n\n            if (!user) {\n                throw new NotFoundException('User not found');\n            }\n\n            const hasUpvoted = comment.upvotes.includes(user._id);\n            const hasDownvoted = comment.downvotes.includes(user._id);\n\n            if (hasUpvoted) {\n                throw new BadRequestException('User has already upvoted this comment');\n            }\n\n            if (hasDownvoted) {\n                const idx = comment.downvotes.indexOf(user._id);\n                comment.downvotes.splice(idx, 1);\n            }\n\n            comment.upvotes.push(user._id);\n            await comment.save({ session });\n\n            await session.commitTransaction();\n\n            return comment;\n        } catch (error) {\n            await session.abortTransaction();\n            throw new Error('Unable to upvote comment');\n        } finally {\n            session.endSession();\n        }\n    }\n\n    async downvoteComment(id: string, username: string): Promise<Comment> {\n        const session = await this.commentModel.db.startSession();\n        session.startTransaction();\n\n        try {\n            const comment = await this.commentModel.findOne({ _id: id }).session(session);\n\n            if (!comment) {\n                throw new NotFoundException('Comment not found');\n            }\n\n            const user: User = await this.userModel.findOne({ username: username }).session(session);\n\n            if (!user) {\n                throw new NotFoundException('User not found');\n            }\n\n            const hasUpvoted = comment.upvotes.includes(user._id);\n            const hasDownvoted = comment.downvotes.includes(user._id);\n\n            if (hasDownvoted) {\n                throw new BadRequestException('User has already downvoted this comment');\n            }\n\n            if (hasUpvoted) {\n                const idx = comment.upvotes.indexOf(user._id);\n                comment.upvotes.splice(idx, 1);\n            }\n\n            comment.downvotes.push(user._id);\n            await comment.save({ session });\n\n            await session.commitTransaction();\n\n            return comment;\n        } catch (error) {\n            await session.abortTransaction();\n            throw new Error('Unable to downvote comment');\n        } finally {\n            session.endSession();\n        }\n    }\n\n    async getComments(): Promise<Comment[]> {\n        try {\n            const comments = await this.commentModel.find();\n            return comments;\n        } catch (error) {\n            throw new Error('Unable to get comments');\n        }\n    }\n\n    async getCommentsByThreadId(id: string): Promise<Comment[]> {\n        try {\n            const thread = await this.threadModel\n                .findOne({ _id: id })\n                .populate('comments');\n\n            if (!thread) {\n                throw new NotFoundException('Thread not found');\n            }\n\n            const comments = await this.commentModel.find({ threadId: id });\n            return comments;\n        } catch (error) {\n            throw new Error('Unable to get comments');\n        }\n    }\n\n    async getCommentById(id: string): Promise<Comment> {\n        try {\n            const comment = await this.commentModel.findOne({ _id: id });\n\n            if (!comment) {\n                throw new NotFoundException('Comment not found');\n            }\n\n            return comment;\n        } catch (error) {\n            throw new Error('Unable to get comment');\n        }\n    }\n\n    async getNestedComments(id: string): Promise<Comment[]> {\n        try {\n            const comment = await this.commentModel\n                .findOne({ _id: id })\n                .populate('comments')\n\n            if (!comment) {\n                throw new NotFoundException('Comment not found');\n            }\n\n            const nestedComments = await this.commentModel.find({ _id: { $in: comment.comments } });\n            return nestedComments;\n        } catch (error) {\n            throw new Error('Unable to get nested comments');\n        }\n    }\n}\n","import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNotEmpty, IsString } from \"class-validator\";\n\nexport class CreateCommentDto {\n    @ApiProperty({\n        description: \"The username of the user\",\n        example: \"john.doe\"\n    })\n    @IsNotEmpty()\n    @IsString()\n    readonly username: string;\n\n    @ApiProperty({\n        description: \"The content of the comment\",\n        example: \"This is the content of my first comment\"\n    })\n    @IsNotEmpty()\n    @IsString()\n    readonly content: string;\n\n    @ApiProperty({\n        description: \"The id of the thread\",\n        example: \"5f9c2b7b1c9d440000b7f1e6\"\n    })\n    @IsNotEmpty()\n    @IsString()\n    readonly thread: string;\n}","import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNotEmpty, IsString } from \"class-validator\";\n\nexport class CreateNestedCommentDto {\n    @ApiProperty({\n        description: \"The username of the user\",\n        example: \"john.doe\"\n    })\n    @IsNotEmpty()\n    @IsString()\n    readonly username: string;\n\n    @ApiProperty({\n        description: \"The content of the comment\",\n        example: \"This is the content of my first comment\"\n    })\n    @IsNotEmpty()\n    @IsString()\n    readonly content: string;\n}","import { DynamicModule, Module, Provider } from '@nestjs/common';\nimport { Neo4jService } from './neo4j.service';\nimport { ConfigModule } from '@nestjs/config';\nimport { createDriver } from './neo4j.utils';\nimport { Neo4jConfig } from './neo4j-config.interface';\nimport { Neo4jTransactionInterceptor } from './neo4j-transaction.interceptor';\nimport { config } from 'rxjs';\n\nconst NEO4J_OPTIONS = 'NEO4J_OPTIONS';\nconst NEO4J_DRIVER = 'NEO4J_DRIVER';\n\n@Module({\n  imports: [ ConfigModule ],\n  providers: [\n    {\n      provide: 'NEO4J_CONFIG',\n      useValue: config\n    }\n  ]\n})\nexport class Neo4jModule {\n\n  static forRoot(config: object): DynamicModule {\n    return {\n      module: Neo4jModule,\n      global: true,\n      providers: [\n        {\n          provide: NEO4J_OPTIONS,\n          useValue: config\n        },\n        {\n          provide: NEO4J_DRIVER,\n          inject: [NEO4J_OPTIONS],\n          useFactory: async (config: Neo4jConfig) => {\n            return await createDriver(config);\n          }\n        },\n        Neo4jService\n      ],\n      exports: [ Neo4jService, Neo4jTransactionInterceptor ]\n    }\n  }\n\n  static forRootAsync(configProvider): DynamicModule {\n    return {\n      module: Neo4jModule,\n      global: true,\n      imports: [ ConfigModule ],\n      providers: [\n        {\n          provide: NEO4J_OPTIONS,\n          ...configProvider\n        } as Provider<any>,\n        {\n          provide: NEO4J_DRIVER,\n          inject: [ NEO4J_OPTIONS ],\n          useFactory: async (config: Neo4jConfig) => {\n            return await createDriver(config);\n          }\n        },\n        Neo4jService\n      ],\n      exports: [ Neo4jService ]\n    }\n  }\n\n}\n","module.exports = require(\"@nestjs/config\");","import neo4j from 'neo4j-driver';\nimport { Neo4jConfig } from './neo4j-config.interface';\n\nexport const createDriver = async (config: Neo4jConfig) => {\n    const driver = neo4j.driver(\n        `${config.scheme}://${config.host}:${config.port}`,\n        neo4j.auth.basic(config.username, config.password)\n    );\n\n    await driver.verifyConnectivity();\n\n    return driver;\n};","import { Injectable, NestInterceptor, ExecutionContext, CallHandler } from \"@nestjs/common\";\nimport { Neo4jService } from \"./neo4j.service\";\nimport { Observable } from \"rxjs\";\nimport { Transaction } from \"neo4j-driver\";\nimport { tap, catchError } from \"rxjs/operators\";\n\n@Injectable()\nexport class Neo4jTransactionInterceptor implements NestInterceptor {\n\n    constructor(private readonly neo4jService: Neo4jService) {}\n\n    intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n        const transaction: Transaction = this.neo4jService.beginTransaction()\n\n        context.switchToHttp().getRequest().transaction = transaction\n\n        return next.handle()\n            .pipe(\n                tap(() => {\n                    transaction.commit()\n                }),\n                catchError(e => {\n                    transaction.rollback()\n                    throw e\n                })\n            )\n    }\n}","module.exports = require(\"rxjs/operators\");","module.exports = require(\"rxjs\");","import { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport { FriendsController } from './friends.controller';\nimport { FriendsService } from './friends.service';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UserSchema } from '../users/schemas/user.schema';\nimport { IsActiveMiddleware } from '../middleware/is-active.middleware';\nimport { MiddlewareModule } from '../middleware/middleware.module';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: 'User', schema: UserSchema }]),\n    MiddlewareModule.forRoot()\n  ],\n  controllers: [FriendsController],\n  providers: [FriendsService]\n})\nexport class FriendsModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n      consumer\n        .apply(IsActiveMiddleware)\n        .forRoutes(FriendsController)\n  }\n}\n","import { Body, Controller, Post, HttpException, HttpStatus, Delete, ValidationPipe, NotFoundException } from '@nestjs/common';\nimport { ApiCreatedResponse, ApiOkResponse, ApiTags, ApiUnprocessableEntityResponse } from '@nestjs/swagger';\n\nimport { FriendsService } from './friends.service';\nimport { CreateFriendshipDto } from './dto/create-friendship.dto';\nimport { DeleteFriendshipDto } from './dto/delete-friendship.dto';\n\n@ApiTags('friends')\n@Controller('friends')\nexport class FriendsController {\n    constructor(private readonly friendsService: FriendsService) {}\n\n    @Post()\n    @ApiCreatedResponse({ description: 'Friendship has been successfully created.'})\n    @ApiUnprocessableEntityResponse({ description: 'Unable to create friendship.'})\n    create(@Body(new ValidationPipe()) createFriendshipDto: CreateFriendshipDto): Promise<Record<string, any>> {\n        return this.friendsService\n            .makeFriend(createFriendshipDto.user, createFriendshipDto.friend)\n            .then(result => result)\n            .catch(error => {\n                if (error instanceof NotFoundException) {\n                    throw new HttpException(error.message, HttpStatus.NOT_FOUND);\n                }\n\n                throw new HttpException('Unable to create friendship', HttpStatus.UNPROCESSABLE_ENTITY);\n            });\n    };\n\n    @Delete()\n    @ApiOkResponse({ description: 'Friendship has been successfully deleted.'})\n    @ApiUnprocessableEntityResponse({ description: 'Unable to delete friendship.'})\n    remove(@Body(new ValidationPipe()) deleteFriendshipDTO: DeleteFriendshipDto): Promise<Record<string, any>> {\n        return this.friendsService\n            .removeFriend(deleteFriendshipDTO.user, deleteFriendshipDTO.friend)\n            .then(result => result)\n            .catch(error => {\n                if (error instanceof NotFoundException) {\n                    throw new HttpException(error.message, HttpStatus.NOT_FOUND);\n                }\n\n                throw new HttpException('Unable to delete friendship', HttpStatus.UNPROCESSABLE_ENTITY);\n            });\n    };\n}\n","import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Neo4jService } from '../neo4j/neo4j.service';\nimport { Types } from 'mongoose';\n\n@Injectable()\nexport class FriendsService {\n    constructor(\n        @InjectModel('User') private readonly userModel,\n        private readonly neo4jService: Neo4jService\n    ) {}\n\n    private async userExists(username: string) {\n        const user = await this.userModel.findOne({ username });\n        return !!user;\n    }\n\n    /**\n     * Befriends two users\n     * @param user A username\n     * @param friend A username\n     */\n    async makeFriend(user: string, friend: string): Promise<Record<string, any>> {\n        const [userExists, friendExists] = await Promise.all([\n            this.userExists(user),\n            this.userExists(friend)\n        ]);\n\n        if (!userExists || !friendExists) {\n            throw new NotFoundException(`User ${!userExists ? user : friend} not found`);\n        }\n\n        const [mongoUser, mongoFried] = await Promise.all([\n            this.userModel.findOne({ username: user }),\n            this.userModel.findOne({ username: friend })\n        ]);\n\n        if (!mongoUser.isActive || !mongoFried.isActive) {\n            throw new NotFoundException(`User ${!mongoUser.isActive ? user : friend} is not active`);\n        }\n\n        const neo = this.neo4jService.beginTransaction();\n\n        try {\n            const existingFriendship = await neo.run(\n                `MATCH (u:User {username: $user})-[r:FRIENDS_WITH]-(f:User {username: $friend}) RETURN r`,\n                { user, friend }\n            );\n\n            if (existingFriendship.records.length > 0) {\n                return existingFriendship.records;\n            } else {\n                const result = await neo.run(\n                    `MERGE (u:User {username: $user})-[:FRIENDS_WITH]-(f:User {username: $friend})`,\n                    { user, friend }\n                );\n\n                await neo.commit();\n\n                return result.records;\n            }\n        } catch (error) {\n            await neo.rollback();\n            throw new Error('Could not make friend')\n        }\n    }\n\n    /**\n     * Unfriends two users\n     * @param user A username\n     * @param friend A username\n     */\n    async removeFriend(user: string, friend: string): Promise<Record<string, any>> {\n        const [userExists, friendExists] = await Promise.all([\n            this.userExists(user),\n            this.userExists(friend)\n        ]);\n\n        if (!userExists || !friendExists) {\n            throw new NotFoundException(`User ${!userExists ? user : friend} not found`);\n        }\n\n        const neo = this.neo4jService.beginTransaction();\n\n        try {\n            const existingFriendship = await neo.run(\n                `MATCH (u:User {username: $user})-[r:FRIENDS_WITH]-(f:User {username: $friend}) RETURN r`,\n                { user, friend }\n            );\n\n            if (existingFriendship.records.length > 0) {\n                const result = await neo.run(\n                    `MATCH (u:User {username: $user})-[r:FRIENDS_WITH]-(f:User {username: $friend}) DELETE r`,\n                    { user, friend }\n                );\n\n                await neo.commit();\n\n                return result.records;\n            } else {\n                return existingFriendship.records;\n            }\n        } catch (error) {\n            await neo.rollback();\n            throw new Error('Could not remove friend')\n        }\n    }\n}\n","import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNotEmpty, IsString } from \"class-validator\";\n\nexport class CreateFriendshipDto {\n    @ApiProperty({\n        description: \"The username of the user\",\n        example: \"john.doe\"\n    })\n    @IsNotEmpty()\n    @IsString()\n    readonly user: string;\n\n    @ApiProperty({\n        description: \"The username of the friend\",\n        example: \"jane.doe\"\n    })\n    @IsNotEmpty()\n    @IsString()\n    readonly friend: string;\n}","import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNotEmpty, IsString } from \"class-validator\";\n\nexport class DeleteFriendshipDto {\n    @ApiProperty({\n        description: \"The username of the user\",\n        example: \"john.doe\"\n    })\n    @IsNotEmpty()\n    @IsString()\n    readonly user: string;\n\n    @ApiProperty({\n        description: \"The username of the friend\",\n        example: \"jane.doe\"\n    })\n    @IsNotEmpty()\n    @IsString()\n    readonly friend: string;\n}","module.exports = require(\"dotenv\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\n\nimport { Logger } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app/app.module';\nimport { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';\n\nimport * as dotenv from 'dotenv';\n\nasync function bootstrap() {\n  dotenv.config({\n    path: \"../.env\"\n  });\n\n  const app = await NestFactory.create(AppModule);\n  const globalPrefix = 'api';\n\n  const config = new DocumentBuilder()\n    .setTitle('Studdit')\n    .setDescription('The Studdit API description. Built for the NoSQL course, provided by Avans Hogeschool.')\n    .setVersion('1.0')\n    .addServer(`http://localhost:${process.env.PORT}/api`)\n    .addServer(`https://studdit-api.herokuapp.com`)\n    .addSecurity('username', {\n      type: 'apiKey',\n      name: 'Authorization',\n      in: 'header',\n      description: 'Your username (bad security, just for POC).'\n    })\n    .build();\n\n  const document = SwaggerModule.createDocument(app, config);\n  \n  SwaggerModule.setup(globalPrefix, app, document);\n  app.setGlobalPrefix(globalPrefix);\n  \n  const port = process.env.PORT || 3003;\n  await app.listen(port);\n  \n  Logger.log(`🚀 Application is running on: http://localhost:${port}/${globalPrefix}`);\n}\n\nbootstrap();\n"],"names":[],"sourceRoot":""}